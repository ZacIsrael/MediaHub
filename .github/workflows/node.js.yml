name: Node.js CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASS }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mongo:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand({ ping: 1 })' | mongosh localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgres://${{ secrets.DB_USER }}:${{ secrets.DB_PASS }}@localhost:5432/${{ secrets.DB_NAME }}
      MONGO_URI: ${{ secrets.MONGO_URI }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      NODE_ENV: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci
        working-directory: ./backend

      - name: Wait for DB services
        run: |
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 && nc -z localhost 27017 && exit 0
            echo "Waiting for databases..."
            sleep 2
          done
          exit 1

      - name: Initialize Postgres schema
        run: |
          PGPASSWORD=${{ secrets.DB_PASS }} psql -h localhost -U ${{ secrets.DB_USER }} -d ${{ secrets.DB_NAME }} -f schema-queries.sql
        working-directory: ./backend

      - name: Seed Postgres test data
        run: |
          PGPASSWORD=${{ secrets.DB_PASS }} psql -h localhost -U ${{ secrets.DB_USER }} -d ${{ secrets.DB_NAME }} -f seed.sql
        working-directory: ./backend

      - name: Run Lint (optional)
        run: npm run lint --if-present
        working-directory: ./backend

      - name: Run Tests (Jest)
        run: npm test
        working-directory: ./backend

      # Optional: Build Docker image to ensure Dockerfile is valid
      # - name: Build Docker image
      #   run: docker build -t mediahub-backend ./backend
