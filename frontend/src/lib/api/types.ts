// structures of each feature

// define the structure of a client
export type Client = {
  id: number;
  name: string;
  email: string;
  phone?: string;
  createdAt?: string;
  updatedAt?: string;
};

// define structure of a booking
export type Booking = {
  // id is a number automatically generated by PostgreSQL (serial primary key)
  id: number;

  // client_id is a foreign key that references an id (number) from the Clients table in PostgreSQL (serial primary key)
  client_id: number;

  // event_date is a TIMESTAMP in SQL; would be a string in typescript
  event_date: string;

  // event_type is a VARCHAR in SQL; its equivalent in typescript is a string
  event_type: string;

  // price is a NUMERIC(10, 2) in SQL; its equivalent in typescript is a number
  price: number;

  // enforced by CHECK constraint (this will be set in the dto file in the backend)
  status: "pending" | "confirmed" | "completed" | "cancelled";

  // TIMESTAMP, default NOW()
  created_at: string;

  // TIMESTAMP, default NOW()
  updated_at: string;
};

// shape of response for getBookingById
export type GetBookingByIdResponse = {
  message?: string;
  booking: Booking | null;
};

// Define the structure for what gets sent with the POST request for adding a booking
// Will be used as the parameter in the createBooking() function (see bookings.ts)
// - client_id: required, number
// - event_date: required, string (date)
// - event_type: required, string
// - price: required, number
export type CreateBookingInput = {
  client_id: number;
  event_date: string;
  event_type: string;
  price: number;
};

// structure of a video document from MongoDB
export type Video = {
  // When creating a new video, _id doesn’t exist yet. But when reading or updating documents, it will.
  _id: string;
  title: string;
  url: string;
  // tags has a '?' at the end because its optional
  tags?: string[];
  viewCount: number;
  publishedAt: Date;
};

// Define the structure for what gets sent with the POST request for adding a video
// Will be used as the parameter in the addVideo() function (see videos.ts)
// - title: required, string
// - url: required, string
// - tags: optional, Array of stringss
// - viewCount: required, number
// - publishedAt: required, string (Date)
export type AddVideoInput = {
  title: string;
  url: string;
  tags?: string[];
  viewCount: number;
  publishedAt: string;
};

// structure of a social post document from MongoDB
export type SocialPost = {
  // When creating a new social post, _id doesn’t exist yet. But when reading or updating documents, it will.
  _id: string;
  platform: string;
  url: string;
  caption: string;
  // hashtags has a '?' at the end because its optional
  hashtags?: string[];
  engagement?: string;
};

// Define the structure for what gets sent with the POST request for adding a social post
// Will be used as the parameter in the addSocialPost() function (see socialposts.ts)
// - platform: string;
// - url: string;
// - caption: string;
// - hashtags?: string[];
export type AddSocialPostInput = {
  platform: string;
  url: string;
  caption: string;
  hashtags?: string[];
};
