// This file contains the API functions for the bookings (CRUD); interacts with the backend

// Import the axios library, a promise-based HTTP client
import api from "./axios";

// define structure of a booking
export type Booking = {
  // id is a number automatically generated by PostgreSQL (serial primary key)
  id: number;

  // client_id is a foreign key that references an id (number) from the Clients table in PostgreSQL (serial primary key)
  client_id: number;

  // event_date is a TIMESTAMP in SQL; would be a string in typescript
  event_date: string;

  // event_type is a VARCHAR in SQL; its equivalent in typescript is a string
  event_type: string;

  // price is a NUMERIC(10, 2) in SQL; its equivalent in typescript is a number
  price: number;

  // enforced by CHECK constraint (this will be set in the dto file in the backend)
  status: "pending" | "confirmed" | "completed" | "cancelled";

  // TIMESTAMP, default NOW()
  created_at: string;

  // TIMESTAMP, default NOW()
  updated_at: string;
};

// structure for basic pagination
export type Paginated<T> = {
    items: T[];
    page: number;
    limit: number;
    total: number;
  };

  export type ListBookingsQuery = { page?: number; limit?: number; q?: string };

  export async function listBookings(params: ListBookingsQuery = {}): Promise<Paginated<Booking>> {
    // data retreived from GET request sent to the backend API
    const { data } = await api.get('/api/bookings', { params });

    // Response structure: { message: string, bookings: Booking[] }
    if (Array.isArray(data.bookings)){
        const items = data.bookings;
        return {
            items,
            page: params.page ?? 1,
            limit: params.limit ?? items.length,
            total: items.length,
        };
    }

    // fallback in case shape changes
    return { items: [], page: 1, limit: 10, total: 0};
  }

  // retreive a booking by its id
  export async function getBookingById(id: number): Promise<Booking> {
    // data retreived from GET request sent to the backend API
    const { data } = await api.get(`/api/bookings/${id}`);
    // if found, data/response structure = { booking: booking-object (id, client_id, event_date, etc.)}
    // if booking with id does not exist, data/response structure = { message: string, booking: null} 
    // return the retreived booking
    return data;
  }
